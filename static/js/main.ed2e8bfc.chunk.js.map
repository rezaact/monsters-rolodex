{"version":3,"sources":["components/card/card.compenent.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","fileteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAAAC,GAAK,OACtB,sBAAKC,UAAU,iBAAf,UACG,qBACGC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACN,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCLXC,G,MAAW,SAACR,GAAD,OACrB,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJfM,G,MAAY,SAAC,GAAD,EAAGC,YAAH,IAAgBC,EAAhB,EAAgBA,aAAhB,OACtB,uBACGZ,UAAU,SACVa,KAAK,SACLF,YAAY,kBACZG,SAAUF,MCsCDG,G,wDAxCZ,aAAe,IAAD,8BACX,gBAgBHH,aAAe,SAACI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACVb,SAAU,GACVU,YAAa,IALL,E,qDAWd,WAAqB,IAAD,OACjBI,MAAM,8CACFC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,S,oBAOjD,WAAU,IAAD,EAC4BC,KAAKN,MAA/Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YACZU,EAAoBpB,EAASqB,QAAQ,SAAA1B,GAAO,OAC/CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYc,wBAEnD,OACG,sBAAKhC,UAAU,MAAf,UACG,iDACA,cAAC,EAAD,CACGW,YAAY,kBACZC,aAAce,KAAKf,eAGtB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnCdK,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ed2e8bfc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n   <div className='card-container'>\r\n      <img \r\n         alt='monster' \r\n         src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n   </div>\r\n);","import React from \"react\";\r\nimport { Card } from \"../card/card.compenent\";\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => (\r\n   <div className='card-list'>{\r\n      props.monsters.map(monster => (\r\n         <Card key={monster.id} monster={monster}/>\r\n      ))\r\n   }</div>\r\n);\r\n\r\n\r\n\r\n","import { React } from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => (\r\n   <input\r\n      className='search'\r\n      type=\"search\"\r\n      placeholder=\"search monsters\"\r\n      onChange={handleChange}\r\n   />\r\n\r\n);","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n   constructor() {\n      super();\n\n      this.state = {\n         monsters: [],\n         searchField: \"\",\n      };\n\n      // this.handleChange = this.handleChange.bind(this);\n   }\n\n   componentDidMount() {\n      fetch(\"https://jsonplaceholder.typicode.com/users\")\n         .then((response) => response.json())\n         .then((users) => this.setState({ monsters: users }));\n   }\n\n   handleChange = (e) => {\n      this.setState({ searchField: e.target.value});\n   }\n\n   render() {\n      const { monsters, searchField } = this.state;\n      const fileteredMonsters = monsters.filter( monster => \n         monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())   \n      );\n      return (\n         <div className=\"App\">\n            <h1>monster rolodex</h1>\n            <SearchBox\n               placeholder='search monsters'\n               handleChange={this.handleChange}\n            />\n            \n            <CardList monsters={fileteredMonsters} />\n         </div>\n      );\n   }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}